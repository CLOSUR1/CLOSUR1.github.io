<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux性能工具</title>
      <link href="/2024/07/13/linux-xing-neng-gong-ju/"/>
      <url>/2024/07/13/linux-xing-neng-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux性能工具"><a href="#Linux性能工具" class="headerlink" title="Linux性能工具"></a>Linux性能工具</h1><h2 id="常用工具一图汇总"><a href="#常用工具一图汇总" class="headerlink" title="常用工具一图汇总"></a>常用工具一图汇总</h2><img src="/2024/07/13/linux-xing-neng-gong-ju/image-20241225112937007.png" class="" title="image-20241225112937007"><p>参考：<a href="https://www.brendangregg.com/linuxperf.html">https://www.brendangregg.com/linuxperf.html</a></p><h2 id="CPU性能优化"><a href="#CPU性能优化" class="headerlink" title="CPU性能优化"></a>CPU性能优化</h2><h3 id="CPU性能指标"><a href="#CPU性能指标" class="headerlink" title="CPU性能指标"></a>CPU性能指标</h3><ul><li>CPU使用率<ul><li>用户CPU</li><li>系统CPU</li><li>IOWAIT</li><li>软中断</li><li>硬中断</li><li>窃取CPU</li><li>客户CPU</li></ul></li><li>上下文切换<ul><li>自愿上下文切换</li><li>非自愿上下文切换</li></ul></li><li>平均负载</li><li>CPU缓存命中率</li></ul><h3 id="CPU性能指标相关工具"><a href="#CPU性能指标相关工具" class="headerlink" title="CPU性能指标相关工具"></a>CPU性能指标相关工具</h3><table><thead><tr><th>性能指标</th><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>平均负载</td><td>uptime、top</td><td>uptime最简单；top提供了更全的指标</td></tr><tr><td>系统整体CPU使用率</td><td>vmstat、mpstat、top sar、/proc/stat</td><td>top、vmstat、mpstat 只可以动态查看，而 sar 还可以记录历史数据 /proc/stat 是其他性能工具的数据来源</td></tr><tr><td>进程CPU使用率</td><td>top、pidstat、ps、htop、atop</td><td>top和ps可以按CPU使用率给进程排序，而pidstat只显示实际用了CPU的进程；htop和atop以不同颜色显示更直观</td></tr><tr><td>系统上下文切换</td><td>vmstat</td><td>除了上下文切换次数，还提供运行状态和不可中断状态进程的数量</td></tr><tr><td>进程上下文切换</td><td>pidstat</td><td>注意加上-w选项</td></tr><tr><td>软中断</td><td>top、/proc/softiras、mpstat</td><td>top提供软中断CPU使用率，而/proc/softirqs和mpstat提供了各种软中断在每个CPU上的运行次数</td></tr><tr><td>硬中断</td><td>vmstat、/proc/interrupts</td><td>vmstat提供总的中断次数，而/proc/interrupts提供各种中断在每个 CPU上运行的累积次数</td></tr><tr><td>网络</td><td>dstat、sar、tcpdump</td><td>dstat和sar提供总的网络接收和发送情况，而tcpdump则是动态抓取正在进行的网络通讯</td></tr><tr><td>I/O</td><td>dstat、sar</td><td>dstat和sar都提供了1/0的整体情况</td></tr><tr><td>CPU 个数</td><td>/proc/cpuinfo、Iscpu</td><td>Iscpu更简洁直观</td></tr><tr><td>事件剖析</td><td>perf、execsnoop</td><td>perf可以用来分析CPU的缓存以及内核调用链，execsnoop用来监控短时进程</td></tr></tbody></table><h2 id="内存性能优化"><a href="#内存性能优化" class="headerlink" title="内存性能优化"></a>内存性能优化</h2><h3 id="内存性能指标"><a href="#内存性能指标" class="headerlink" title="内存性能指标"></a>内存性能指标</h3><ul><li>系统内存指标<ul><li>已用内存</li><li>剩余内存</li><li>缺页异常<ul><li>主缺页异常</li><li>次缺页异常</li></ul></li><li>缓存/缓冲区<ul><li>使用量</li><li>命中率</li></ul></li><li>Slabs</li></ul></li><li>进程内存指标<ul><li>虚拟内存（VSS）</li><li>常驻内存（RSS）</li><li>按比例分配共享内存后的物理内存（PSS）</li><li>独享内存（USS）</li><li>共享内存</li><li>SWAP内存</li><li>缺页异常<ul><li>主缺页异常</li><li>次缺页异常</li></ul></li></ul></li><li>SWAP<ul><li>已用空间</li><li>剩余空间</li><li>换入速度</li><li>换出速度</li></ul></li></ul><h3 id="内存性能工具"><a href="#内存性能工具" class="headerlink" title="内存性能工具"></a>内存性能工具</h3><table><thead><tr><th>性能指标</th><th>性能工具</th><th>说明</th></tr></thead><tbody><tr><td>系统已用、可用、剩余内存</td><td>free、vmstat、sar /proc/meminfo</td><td>free最为简单，而vmstat、sar更为全面； /proc/meminfo是其他工具的数据来源，也常用于监控系统中</td></tr><tr><td>进程虚拟内存、常驻内存、共享内存</td><td>ps、top、pidstat、 /proc/pid/stat /proc/pid/status</td><td>ps和top最简单，而pidstat则需要加上-r选项；/proc/pid/stat 和/proc/pid/status是其他工具的数据来源，也常用于监控系统中</td></tr><tr><td>进程内存分布</td><td>pmap、/proc/pid/maps</td><td>/proc/pid/maps是pmap的数据来 源</td></tr><tr><td>进程Swap换出内存</td><td>top、/proc/pid/status</td><td>/proc/pid/status是top的数据来源</td></tr><tr><td>进程缺页异常</td><td>ps、top、pidstat</td><td>注意给pidstat加上-r选项</td></tr><tr><td>系统换页情况</td><td>sar</td><td>注意加上-B选项</td></tr><tr><td>缓存/缓冲区用量</td><td>free、vmstat、sar、cachestat</td><td>vmstat最常用，而cachestat需要安装bcc</td></tr><tr><td>缓存/缓冲区命中率</td><td>cachetop</td><td>需要安装bcc</td></tr><tr><td>SWAP已用空间和剩余 空间</td><td>free、sar</td><td>free最为简单，而sar还可以记录历史</td></tr><tr><td>Swap换入换出</td><td>vmstat、sar</td><td>vmstat最为简单，而sar还可以记录历史</td></tr><tr><td>内存泄漏检测</td><td>memleak、valgrind</td><td>memleak需要安装bcc，valgrind还可以在旧版本（如3.x）内核中使用</td></tr><tr><td>指定文件的缓存大小</td><td>pcstat</td><td>需要从<a href="https://github.com/tobert/pcstat">源码</a>下载安装</td></tr></tbody></table><h2 id="I-O性能优化"><a href="#I-O性能优化" class="headerlink" title="I/O性能优化"></a>I/O性能优化</h2><h3 id="I-O性能指标"><a href="#I-O性能指标" class="headerlink" title="I/O性能指标"></a>I/O性能指标</h3><ul><li>文件系统<ul><li>存储空间容量、使用量以及剩余空间</li><li>索引节点容量、使用量以及剩余量</li><li>缓存<ul><li>页缓存</li><li>目录项缓存</li><li>索引节点缓存</li><li>具体文件系统缓存（如ext4的缓存）</li></ul></li><li>IOPS（文件I/O）</li><li>响应时间（延迟）</li><li>吞吐量（B/s）</li></ul></li><li>磁盘<ul><li>使用率</li><li>IOPS</li><li>吞吐量（B/s）</li><li>响应时间（延迟）</li><li>缓冲区</li><li>相关因素<ul><li>读写类型（顺序or随机）</li><li>读写比例</li><li>读写大小</li><li>存储类型（如RAID级别、本地还是网络）</li></ul></li></ul></li></ul><h3 id="文件系统和磁盘I-O性能工具"><a href="#文件系统和磁盘I-O性能工具" class="headerlink" title="文件系统和磁盘I/O性能工具"></a>文件系统和磁盘I/O性能工具</h3><table><thead><tr><th>性能指标</th><th>性能工具</th><th>说明</th></tr></thead><tbody><tr><td>文件系统空间容量、使用量以及剩余空间</td><td>df</td><td>详细文档可以执行into coreutils ‘df invocation’ 命令 查询</td></tr><tr><td>索引节点容量、使用量以及剩余量</td><td>df</td><td>注意加上-i选项</td></tr><tr><td>页缓存和可回收Slab缓存</td><td>/proc/meminfo、sar、vmstat</td><td>注意sar需要加上-r选项， 而/proc/meminfo是其他工具的数据来源，也常用于监控</td></tr><tr><td>缓冲区</td><td>/proc/meminfo、sar、vmstat</td><td>注意sar需要加上-r选项， 而/proc/meminfo是其他工具的数据来源，也常用于监控</td></tr><tr><td>目录项、索引节点以及文件系统的缓存</td><td>/proc/slabinfo、slabtop</td><td>slabtop更直观，而/proc/slabinfo常用于监控</td></tr><tr><td>磁盘I/O使用率、IOPS、吞吐量、响应时间、I/O平均大小以及等待队列长度</td><td>iostat、sar、dstat、 /proc/diskstats</td><td>iostat最为常用，注意使用iostat -d -x或sar-d选项；/proc/diskstats则是其他工具数据来源，也常用于监控</td></tr><tr><td>进程I/O大小以及I/O延迟</td><td>pidstat、iotop</td><td>注意使用pidstat -d选项</td></tr><tr><td>块设备I/O事件跟踪</td><td>blktrace</td><td>需要跟blkparse配合使用，比如blktrace -d /dev/sda -o- | blkparse -i-</td></tr><tr><td>进程I/O系统调用跟踪</td><td>strace、perf trace</td><td>strace只可以跟踪单个进程，而perftrace还可以跟踪所有进程的系统调用</td></tr><tr><td>进程块设备I/O大小跟踪</td><td>biosnoop, biotop</td><td>需要安装bcc</td></tr><tr><td>动态追踪</td><td>ftrace、bcc、systemtap</td><td>ftrace用于跟踪内核函数调用栈，而bcc和systemtap则用于跟踪内核或应用程序的执行过程（注意bcc要求内核版本&gt;=4.1）</td></tr></tbody></table><h2 id="网络性能优化"><a href="#网络性能优化" class="headerlink" title="网络性能优化"></a>网络性能优化</h2><h3 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h3><ul><li>网络层<ul><li>丢包数</li><li>TTL</li><li>拆包</li></ul></li><li>链路层<ul><li>PPS（每秒网络帧数）</li><li>BPS（每秒字节数）</li><li>丢包数</li><li>错误数</li></ul></li><li>应用层<ul><li>QPS（每秒请求数）</li><li>socket缓冲区大小</li><li>DNS解析延迟</li><li>响应时间</li><li>错误数</li></ul></li><li>传输层<ul><li>TCP连接数<ul><li>全连接</li><li>半连接</li><li>timewait</li></ul></li><li>连接跟踪数</li><li>重传数</li><li>丢包数</li><li>延迟</li></ul></li></ul><h3 id="网络性能工具"><a href="#网络性能工具" class="headerlink" title="网络性能工具"></a>网络性能工具</h3><table><thead><tr><th>性能指标</th><th>性能工具</th><th>说明</th></tr></thead><tbody><tr><td>吞吐量（BPS）</td><td>sar、nethogs、iftop、/proc/net/dev</td><td>分别可以查看网络接口、进程以及IP地址的网络吞吐量； /proc/net/dev 常用于监控</td></tr><tr><td>吞吐量（PPS）</td><td>sar、/proc/net/dev</td><td>注意使用sar -n DEV</td></tr><tr><td>网络连接数</td><td>netstat、ss</td><td>ss速度更快</td></tr><tr><td>网络错误数</td><td>netstat、sar</td><td>注意使用netstat -s或者sar -n EDEV/EIP</td></tr><tr><td>网络延迟</td><td>ping、hping3</td><td>ping基于ICMP，而hping3则基于 TCP协议</td></tr><tr><td>连接跟踪数</td><td>contrack、/proc/sys/net /netfilter/nf _contrack_count、/proc/sys/net/netfilter/nf _contrack_max</td><td>conntrack可用来查看所有连接跟踪的相信信息，nf_conntrack_count只是连接跟踪的数量，而 nf_conntrack_max 则限制了总的连接跟踪数量</td></tr><tr><td>路由</td><td>mtr、traceroute、route</td><td>route用于查询路由表，而mtr和 traceroute则用来排查和定位网络链路中的路由问题</td></tr><tr><td>DNS</td><td>dig、nslookup</td><td>用于排查DNS解析的问题</td></tr><tr><td>防火墻和NAT</td><td>iptables</td><td>用于排查防火墙及NAT的问题</td></tr><tr><td>网卡选项</td><td>ethtool</td><td>用于查看和配置网络接口的功能选项</td></tr><tr><td>网络抓包</td><td>tcpdump、Wireshark</td><td>通常在服务器中使用tcpdump抓包后复制出来用Wireshark的图形界面分析</td></tr><tr><td>动态追踪</td><td>ftrace、bcc、systemtap</td><td>ftrace用于跟踪内核函数调用栈，而bcc和systemtap则用于跟踪内核或应用程序的执行过程（注意bcc要求内核版本&gt;=4.1）</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SIM卡、ESIM杂谈</title>
      <link href="/2024/07/10/sim-qia-esim-za-tan/"/>
      <url>/2024/07/10/sim-qia-esim-za-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="SIM卡、ESIM杂谈"><a href="#SIM卡、ESIM杂谈" class="headerlink" title="SIM卡、ESIM杂谈"></a>SIM卡、ESIM杂谈</h1><h2 id="我的手机和卡为什么有那么多什么id之类的？"><a href="#我的手机和卡为什么有那么多什么id之类的？" class="headerlink" title="我的手机和卡为什么有那么多什么id之类的？"></a>我的手机和卡为什么有那么多什么id之类的？</h2><style>.czzrnvgpddqw{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20241111160432116.png" class="czzrnvgpddqw" alt="image-20241111160432116"><p><strong>我们的手机+SIM卡，实际上有三个号码，MSISDN、IMSI和IMEI</strong></p><h3 id="MSISDN"><a href="#MSISDN" class="headerlink" title="MSISDN"></a>MSISDN</h3><p>我们常见的手机号码（国家码+86其实就是0086）</p><style>.aiiuulmmrpjn{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20241111161112697.png" class="aiiuulmmrpjn" alt="image-20241111161112697"><h3 id="ICCID"><a href="#ICCID" class="headerlink" title="ICCID"></a>ICCID</h3><p>Integrate circuit card identity 集成电路卡识别码即<strong>SIM卡卡号</strong>，相当于手机卡的身份证。 ICCID为IC卡的识别号码，共由20位字符组成。分别介绍如下： 前六位运营商代码：中国移动的为：898600；898602；898604；898607 ，中国联通的为：898601、898606、898609，中国电信898603、898611。</p><h3 id="IMSI"><a href="#IMSI" class="headerlink" title="IMSI"></a>IMSI</h3><p>International Mobile Subscriber Identity 国际移动用户识别码，是用于区分蜂窝网络中<strong>不同用户的</strong>、<strong>在所有蜂窝网络中不重复的识别码</strong>（相当于与SIM卡卡体绑定）。手机将IMSI存储于一个64比特的字段发送给网络。IMSI可以用来在归属位置寄存器（HLR，Home Location Register）或拜访位置寄存器（VLR，Visitor Location Register）中查询用户的信息。为了避免被监听者识别并追踪特定的用户，大部分情形下手机和网络之间的通信会使用<strong>随机产生的临时移动用户识别码</strong>（<strong>TMSI</strong>，Temporary Mobile Subscriber Identity）代替IMSI。</p><style>.coecscgxsvrh{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20241021104021925.png" class="coecscgxsvrh" alt="image-20241021104021925"><h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>International Mobile Equipment Identity 国际移动设备识别码，即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等移动通信设备，相当于移动电话的身份证。序列号共有15~17位数字，前8位（TAC）是型号核准号码（早期为6位），是区分手机品牌和型号的编码。接着2位（FAC）是最后装配号（仅在早期机型中存在），代表最终装配的代码。后6位（SNR）是串号，代表生产顺序号。</p><h2 id="先来看看物理形态"><a href="#先来看看物理形态" class="headerlink" title="先来看看物理形态"></a>先来看看物理形态</h2><p>普通SIM卡实体：</p><img src="/2024/07/10/sim-qia-esim-za-tan/image-20240801100029392.png" class="" title="image-20240801100029392"><p>ESIM的实体：</p><style>.eqsufzysdmoo{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20240801100355253.png" class="eqsufzysdmoo" alt="image-20240801100355253"><p>小趣事，实际上这种芯片不仅存在于PCB，还存在于的插拔SIM卡( ^_^)/~~~</p><style>.nqeewqkciscf{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20240801100739770.png" class="nqeewqkciscf" alt="image-20240801100739770"><p>甚至国内厂商从其他设备拆下ESIM然后装到定制的卡套上（降本增效之围城：里面的人想出去，外面的人想进来）</p><style>.chrjmzvcvftl{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/image-20240801101420462.png" class="chrjmzvcvftl" alt="image-20240801101420462"><h2 id="国内的ESIM形势"><a href="#国内的ESIM形势" class="headerlink" title="国内的ESIM形势"></a>国内的ESIM形势</h2><p>联通一直在 eSIM 这块走的比较前面, 包括一开始做一号双终端和iPad eSIM, 后续如果推出纯esim的手机，可能联通会有很长一段时间的先发优势。</p><style>.zvdpnlzdbfrj{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/1cbfe3aadc0469c0a41f0e00a07462af546418.jpg@1052w_!web-dynamic.avif" class="zvdpnlzdbfrj" alt="img"><style>.wbxsulpeltyc{zoom:50%;}</style><img src="/2024/07/10/sim-qia-esim-za-tan/bf6aa7a918363d0270d4f0b23dccb639546418.jpg@1052w_!web-dynamic.avif" class="wbxsulpeltyc" alt="img"><p>联通在 MWC24 Shanghai 的表态</p><blockquote><p>[!IMPORTANT]</p><p>在中国是有特定的环境的很多国外的厂商非常纳闷中国到底对 eSIM 是什么态度到底遇到了什么困难,其实在 eSIM 技术本身和全球一样没有什么特殊之处。但在中国有一些特定的环境，比如说入网实名制，比如说电信诈骗问题的解决只有吧这个全链条的问题都全部解决好，才能给 eSIM 创造非常好的发展环境。<br>当然到今天为止我们认为中国技术以外的问题都逐步得到解决非常成熟！</p></blockquote><p>然而：</p><p>eSIM 芯片能拆, 利用开 eSIM 可以批量的漏洞, 拆出来之后放到能模拟 IMEI 的设备上(猫池)就能打电话or发短信，并且轻松用境外号码（这下缅北本地化了）</p><h2 id="携号转网是怎么个事？"><a href="#携号转网是怎么个事？" class="headerlink" title="携号转网是怎么个事？"></a>携号转网是怎么个事？</h2><p>早在19年12月，携号转网业务就在全国范围内推出，然而实际上能转和转成功的依旧寥寥无几～</p><p>在手机通话中，存在主叫和被叫，需要同时使用IMSI和MSISDN的，但是IMSI和MSISDN并不是一一对应关系。有丢过卡的话，去营业厅换SIM卡的时候，IMSI（和卡体绑定）就变了，而MSISDN不变。与手机通话不同，上网是单个用户的行为，只需要IMSI号码合法，业务正常，无欠费，即可正常上网。那携号转网是怎么改变运营商的，就很容易得知了。</p><p>携号转网，不变的是MSISDN，变化的是IMSI。在携号转网的同时，用户需其实是要更换SIM卡的。</p><p>那为什么我们曾测试的联通ESIM方案能一直切换运营商一直做携号转网呢？这就涉及到空中写号了。</p><h2 id="空中写号是怎么个事？"><a href="#空中写号是怎么个事？" class="headerlink" title="空中写号是怎么个事？"></a>空中写号是怎么个事？</h2><p>空中写卡，是指SIM卡功能全部通过软件实现的eSIM和vSIM，可通过远程配置（OTA）更新运营商配置文件，实现运营商网络切换。</p><p>实际上SIM卡有多个号码，空中写卡更改的到底是卡的什么号码呢？</p><p>一般来说，更改的是eSIM卡和vSIM卡的IMSI号码。</p><img src="/2024/07/10/sim-qia-esim-za-tan/1592212925857078347.png" class="" title="img"><p>一张ESIM的物联网应用，需要从获取其EID开始，拿到EID后则需根据EID获取本卡预存的“种子号”，激活种子号并使用种子号进行注网上网后，下载其他业务码号进行使用，切换使用下载的码号，即可完成不同运营商的切换使用。</p><img src="/2024/07/10/sim-qia-esim-za-tan/image-20241111155558786.png" class="" title="image-20241111155558786"><p>物联网设备集成eSIM卡，通常需要多方配合，包括厂商、卡商、运营商、中间平台、证书机构等；在实际使用的时候由于业务鉴权等等，还会有对应的授权和激活key等等需要操作……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LTE信号学习分析</title>
      <link href="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/"/>
      <url>/2024/07/01/lte-xin-hao-xue-xi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="LTE信号学习分析"><a href="#LTE信号学习分析" class="headerlink" title="LTE信号学习分析"></a>LTE信号学习分析</h1><h2 id="国内运营商频谱资源分布情况"><a href="#国内运营商频谱资源分布情况" class="headerlink" title="国内运营商频谱资源分布情况"></a>国内运营商频谱资源分布情况</h2><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/17291286028642.png" class="" width="17291286028642">国内运营商在频谱资源上主要分为3个板块<h3 id="低频"><a href="#低频" class="headerlink" title="低频"></a>低频</h3><p>第一块是低于1GHz的低频，因为衍射能力强、衰减低，俗称打底网，用于保证信号覆盖，增加通话的可靠度，补充上行速度，值得注意的是，在900M频段附近移动清退后分给了联通一些，自己保留了15M，不过因为清退GSM发生在5G建设之后，加上和广电共享N28，导致其作为4G频段建设较慢。</p><h3 id="中频"><a href="#中频" class="headerlink" title="中频"></a>中频</h3><p>这部分主要是4G的频率，这个频段相对兼顾了速度和覆盖，老三家都有一些B3频段，作为4G网络长期维持的基础频段，对于电信和联通来讲，B1本身就是他们的主力，目前两家采取共建共享的方式，合并成45M，有的地方是4G、5G各开20M，还有的地方（国内厂家其实很多都没有支持）会通过开启DSS（动态频谱分配技术），按终端对RB载波资源块的需求来调整4/5G的比例，但是缺点是容量会有损失，实际上在国内的基建情况是直接开的40M的N1。而在移动方面广泛部署B3之前，B38（N41的子集）和B39则是其最初的主力，也就是4G的TDD频段，B39现在仍然在当4G使用，B34则是沿用3G TD-SCDMA部分（历史遗留问题）设备改造的频段，用的不多。而三家都有的B40因为会和军用雷达干扰，原则上只能在室内使用，三家部署的积极性都不大。而B41一开始也只是用于室内，这个频段曾经三家都有，但是因为TDD本身的上行能力问题，而且本身作为中高频覆盖比中频要差，当初电信和联通就没怎么部署，最后都退给了移动发展5G，移动把中间完整的100M部署给了5G，剩下60M按情况部署给4/5G，算得上是移动的主力容量层。</p><style>.ceexwnsanlme{zoom:50%;}</style><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112102846806.png" class="ceexwnsanlme" alt="image-20241112102846806"><h3 id="高频"><a href="#高频" class="headerlink" title="高频"></a>高频</h3><p>这部分是5G的主力频段，n78频段在5G时代得到了广泛的应用，n77和n79目前还不太普及，主要是用于室内密集场景。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>如果要追求信号覆盖，低频显然是必不可少的，像电梯、野外、高层或者室内深处的环境，只要没有室内覆盖，而且外面没有中频信号塔，手机就会优先连接B5、B5或者n28。</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112105038895.png" class="" title="image-20241112105038895"><p>在类似的极限环境下，并不是手机收不到基站的信号，而是手机的上行信号基站接收不到。</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112105556910.png" class="" title="image-20241112105556910"><p>而低频因为比高频的路径损耗低，所以手机的上行信号相对于高频更容易被基站接收到，因此才有稳定的连接。</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112105722030.png" class="" title="image-20241112105722030"><p>在实际生活中，低频虽然会被用到，但是用到的生活基本信号只有一两格，速度也不快。这是因为低频的资源很宝贵，所以频宽很难做得宽，速度就上不去，而且低频覆盖范围很大，基站如果太密就会容易发生互相干扰，所以低频都是低密度覆盖，连上的生活通常距离远一些，信号就会差，而一个站覆盖的广用户就会多，还要保证通话业务，分到的资源就很少，因此低频的连接优先级就比较低。这个时候主力频段的意义就来了，虽然覆盖没有那么广，但是中等的信号配上20-240M左右的频宽，基本上能满足大多数情况的上网需求。</p><p>对于移动通信来讲，上网体验很体现木桶效应。</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112114645608.png" class="" title="image-20241112114645608"><h2 id="基站会限制设备信号吗？"><a href="#基站会限制设备信号吗？" class="headerlink" title="基站会限制设备信号吗？"></a>基站会限制设备信号吗？</h2><p>会！基站侧为了减少设备之间的互相干扰，会根据接入设备的信号水平，下放一个Pmax限制最大输出功率<img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112115625365.png" class="" title="image-20241112115625365"></p><p>在4G刚普及的时候，绝大多数的4G LTE频段（除公共安全领域的 Band 14 外），在规范3GPP中只规范了一种功率等级，Power class 3。但随着5G 步伐的不断加速，为了改善 TD-LTE网络的上行覆盖范围，从而提升弱信号环境下手机的上网体验问题，以Sprint、中国移动为代表的运营商引入了仅面向于高频段 Band41（2.5~2.7GHz）的 Power class 2，简称“PC2”技术。</p><p>PC3把上行链路的最大发射功率限制在 23 dBm±2 ，导致LTE网络下行与上行链路的功率差异大约为 5 dB。在某些只有下行覆盖的区域，设备可以下载数据而上传非常非常慢。但PC2 技术可以将最大发射功率提高 3dB 至 26dBm±2，理论上增强 30% 的上行覆盖范围，大幅节约网络建设成本（没错，运营商也要降本增效）。</p><p>但是实际情况却不尽如人意，运营商调整基站策略，同时要设备ipcc配置实现，大多数情况下连PC2都没用上。</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112140507279.png" class="" title="image-20241112140507279"><p>题外话：高通X75基带的NV配置就可以配置层无视Pmax，“有些设备”甚至可以调成单PA发32dbm，代价是增加了耗电和烧射频的风险。（当然也会干扰其他手机和增大辐射）</p><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112140845919.png" class="" title="image-20241112140845919"><h2 id="常见模组频段支持情况"><a href="#常见模组频段支持情况" class="headerlink" title="常见模组频段支持情况"></a>常见模组频段支持情况</h2><table><thead><tr><th>LTE module</th><th>EC200A-CN</th><th>EC200A-EU</th><th>EC200A-AU</th><th>EG25-G</th><th>EC800K-CN</th><th>EC20-CN</th></tr></thead><tbody><tr><td>区域/运营商</td><td>中国/印度</td><td>欧洲</td><td>拉丁美洲/澳大利亚/新西兰</td><td>全球</td><td>中国/印度</td><td>中国</td></tr><tr><td>LTE-FDD</td><td>B1/B3/B5/B8</td><td>B1/B3/B5/B7/B8/B20/B28</td><td>B1/B2/B3/B4/B5/B7/B8/B28/B66</td><td>B1/B2/B3/B4/B5/B7/B8/B12/B13/B18/B19/B20/B25/B26/B28</td><td>B1/B3/B5/B8</td><td>B1/B3/B5/B8</td></tr><tr><td>LTE-TDD</td><td>B34/B38/B39/B40/B41</td><td>B38/B40/B41</td><td>/B40</td><td>B38/B39/B40/B41</td><td>B34/B38/B39/B40/B41</td><td>B34/B38/B39/B40/B41</td></tr><tr><td>强制认证</td><td>SRRC/NAL/CCC</td><td>GCF/CE</td><td>FCC/Anatal</td><td>覆盖范围较多，具体参考产品规格书</td><td>SRRC/NAL/CCC</td><td>SRRC/NAL/CCC</td></tr><tr><td>其他认证</td><td>WHQL</td><td>WHQL</td><td>WHQL</td><td>WHQL</td><td>WHQL</td><td>WHQL</td></tr><tr><td>LTE-FDD（Mbps）</td><td>150（下行）/50（上行）</td><td>150（下行）/50（上行）</td><td>150（下行）/50（上行）</td><td>150（下行）/50（上行）</td><td>10（下行）/5（上行）</td><td>150（下行）/50（上行）</td></tr><tr><td>LTE-TDD</td><td>120（下行）/30（上行）</td><td>120（下行）/30（上行）</td><td>120（下行）/30（上行）</td><td>130（下行）/30（上行）</td><td>8.96（下行）/3.1（上行）</td><td>130（下行）/30（上行）</td></tr></tbody></table><h2 id="户外物联网场景分析"><a href="#户外物联网场景分析" class="headerlink" title="户外物联网场景分析"></a>户外物联网场景分析</h2><p>看完“国内运营商频谱资源分布情况”和“常见模组频段支持情况”，我们不难发现其实常见4G模组在国内的频段覆盖其实都是到位的，户外场景的4G频段主要如下：</p><ul><li>低频<ul><li>移动：B8（889-904、934-949共30M）</li><li>联通&amp;电信共建共享：B8（904-915、949-960共22M）B5（825-835、870-880共30M）</li></ul></li><li>中频<ul><li>移动：B3（1710-1735共50M）B39（1885-1915共30M）B41（2615-2675共60M）</li><li>联通&amp;电信共建共享：B1（1940-1965、2130-2155共45M）（1920-1940、2110-2130共40M）</li><li>联通：B3（1735-1765、1830-1860共60M）</li><li>电信：B3（1765-1785、1860-1889共40M）</li></ul></li></ul><p>从频段不难看出，FDD下的B1/B3是兼顾速率和覆盖的重中之重，针对户外信号较弱的地方，B8和B5则能提供基础的网络覆盖。在4G天线的设计上应该更注重对应这些band下的性能。</p><h2 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h2><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241111174727872.png" class="" title="image-20241111174727872"><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241111174816681.png" class="" title="image-20241111174816681"><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241111175351378.png" class="" title="image-20241111175351378"><img src="/2024/07/01/lte-xin-hao-xue-xi-fen-xi/image-20241112142537394.png" class="" title="image-20241112142537394">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenWRT系统移植移远EC200A模块</title>
      <link href="/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/"/>
      <url>/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenWRT系统移植移远EC200A模块"><a href="#OpenWRT系统移植移远EC200A模块" class="headerlink" title="OpenWRT系统移植移远EC200A模块"></a><strong>OpenWRT系统移植移远EC200A模块</strong></h1><h2 id="网卡的驱动方式"><a href="#网卡的驱动方式" class="headerlink" title="网卡的驱动方式"></a><strong>网卡的驱动方式</strong></h2><p>转载：<a href="https://blog.csdn.net/qlexcel/article/details/117150901">拨号PPP NDIS RNDIS CDC ECM NCM QMI_WWAN GOBINET RMNET MBIM概念介绍</a><br>1、其实总结起来，我觉得就两种，一种是PPP类，一种是NDIS族类。NDIS族类的方式是标准化加高效化，对上，尽量标准化为网络设备；对下，则尽可能适应物理通道，高效利用。<br>2、RMNET拨号、QMI拨号、NDIS拨号都是NDIS拨号，叫法不同而已。<br>3、USB网卡拨号分为RMNET/QMI/NDIS、ECM、MBIM、RNDIS四种类型。<br>5、速度、对比、选用<br>  PPP使用复杂，对CPU负载大，网速上不去，不推荐使用。<br>  NDIS拨号支持QMAP功能，可以实现IP聚合和IP复用功能。支持IP聚合就可以一次URB传输多个IP包，减少CPU负载率。支持IP复用，可以实现多网卡的功能。因此推荐使用（尤其是高通模组）。<br>  ECM不支持IP聚合和复用功能，决定了不适用于高速场景。<br>  RNDIS协议上是支持IP聚合的，但是Linux自带驱动没有使用，所以也不适用于高速场景。<br>  MBIM默认就支持IP聚合，也支持IP复用。推荐使用。</p><p>EC200A 支持的网卡驱动： <strong>PPP</strong>、 <strong>ECM</strong>、<strong>RNDIS</strong><br>EC20 支持：<strong>PPP</strong>、<strong>QMI</strong>、 <strong>GobiNet</strong></p><h2 id="用到的文件："><a href="#用到的文件：" class="headerlink" title="用到的文件："></a><strong>用到的文件：</strong></h2><ol><li>Quectel_Linux_USB_Serial_Option_Driver_20230524.tgz</li><li>KBA_EC200&amp;UC200_Linux&amp;Android_USB_driver_移植说明.pdf</li><li>Quectel_UMTS_LTE_5G_Linux_USB_Driver用户指导V1.0.pdf</li></ol><h2 id="确定linux版本和模组pid、vid"><a href="#确定linux版本和模组pid、vid" class="headerlink" title="确定linux版本和模组pid、vid"></a><strong>确定linux版本和模组pid、vid</strong></h2><p>确定系统的linux内核版本，可用以下命令查看确定，如下可确定linux内核版本为5.4.238</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@OpenWrt:/# dmesg | head[ &nbsp; &nbsp;0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034][ &nbsp; &nbsp;0.000000] Linux version 5.4.238 (chenlishe@datalink-System-Product-Name) (gcc version 8.4.0 (OpenWrt GCC 8.4.0 r16856-dcaa45c67d)) #0 SMP Thu Jul 6 07:27:51 2023[ &nbsp; &nbsp;0.000000] Machine model: MediaTek MT7981 RFB[ &nbsp; &nbsp;0.000000] earlycon: uart8250 at MMIO32 0x0000000011002000 (options '')[ &nbsp; &nbsp;0.000000] printk: bootconsole [uart8250] enabled[ &nbsp; &nbsp;0.000000] On node 0 totalpages: 64592[ &nbsp; &nbsp;0.000000] &nbsp; DMA32 zone: 1024 pages used for memmap[ &nbsp; &nbsp;0.000000] &nbsp; DMA32 zone: 0 pages reserved[ &nbsp; &nbsp;0.000000] &nbsp; DMA32 zone: 64592 pages, LIFO batch:15[ &nbsp; &nbsp;0.000000] psci: probing for conduit method from DT.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EC200A series (RTOS): VID: 0x02c7c  PID: 0x6005</p><p>openwrt版本可以通过以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@OpenWrt:/# cat /etc/openwrt_releaseDISTRIB_ID='OpenWrt'DISTRIB_RELEASE='21.02-SNAPSHOT'DISTRIB_REVISION='r16856-dcaa45c67d'DISTRIB_TARGET='mediatek/mt7981'DISTRIB_ARCH='aarch64_cortex-a53'DISTRIB_DESCRIPTION='OpenWrt 21.02-SNAPSHOT r16856-dcaa45c67d'DISTRIB_TAINTS='no-all'root@OpenWrt:/# cat /etc/os-releaseNAME="OpenWrt"VERSION="21.02-SNAPSHOT"ID="openwrt"ID_LIKE="lede openwrt"PRETTY_NAME="OpenWrt 21.02-SNAPSHOT"VERSION_ID="21.02-snapshot"HOME_URL="https://openwrt.org/"BUG_URL="https://bugs.openwrt.org/"SUPPORT_URL="https://forum.openwrt.org/"BUILD_ID="r16856-dcaa45c67d"OPENWRT_BOARD="mediatek/mt7981"OPENWRT_ARCH="aarch64_cortex-a53"OPENWRT_TAINTS="no-all"OPENWRT_DEVICE_MANUFACTURER="OpenWrt"OPENWRT_DEVICE_MANUFACTURER_URL="https://openwrt.org/"OPENWRT_DEVICE_PRODUCT="Generic"OPENWRT_DEVICE_REVISION="v0"OPENWRT_RELEASE="OpenWrt 21.02-SNAPSHOT r16856-dcaa45c67d"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译openwrt"><a href="#编译openwrt" class="headerlink" title="编译openwrt"></a><strong>编译openwrt</strong></h2><p>一般openwrt系统的源码目录下都有README，根据README来进行编译即可，例如：</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a><strong>Requirements</strong></h3><p>You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the <a href="https://openwrt.org/docs/guide-developer/build-system/install-buildsystem">Build System Setup</a> documentation.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc binutils bzip2 flex python3 perl make find grep diff unzip gawk getoptsubversion libz-dev libc-dev rsync which<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a><strong>Quickstart</strong></h3><ol><li>Run <code>./scripts/feeds update -a</code> to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default</li><li>Run <code>./scripts/feeds install -a</code> to install symlinks for all obtained packages into package/feeds/</li><li>Run <code>make menuconfig</code> to select your preferred configuration for the toolchain, target system &amp; firmware packages.</li><li>Run <code>make</code> to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp; all chosen applications for your target system.</li></ol><p>准备好各种编译工具，运行1.和2.后make menuconfig进行编译前设置，选择对应板子的芯片类型和板子类型，如图为MT7981和MediaTek mt7981-spim-nand-rfb。</p><img src="/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/Untitled.png" class="" title="make menuconfig"><p>保存后退出，在源码目录运行<code>make V=99</code>进行编译，V=99是输出打印，方便查看编译过程错误的原因（如有），第一次make成功后后续的编译可以根据电脑的cpu核心数加<code>-j12</code>，12是电脑cpu的核心数量，越大越快，不建议完全等于cpu核心数量。<br>第一次make完后源码目录会出现build_dir目录，其中会包含编译工具链我们需要替换的文件，可以用<code>find build_dir/ -name option.c</code>找到，我的是：build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_mt7981/linux-5.4.238/drivers/usb/serial/option.c</p><h2 id="简单：替换驱动文件法"><a href="#简单：替换驱动文件法" class="headerlink" title="简单：替换驱动文件法"></a><strong>简单：替换驱动文件法</strong></h2><p>在Quectel_Linux_USB_Serial_Option_Driver_20230524.tgz中找到与自己系统内核版本最近的文件夹，我的系统内核是5.4.238，最接近的是5.4.41的这个。</p><p>进入文件夹最里层drivers/usb/serial/，会看到有四个文件：option.c、qcserial.c、usb_wwan.c、usb-wwan.h</p><p>打开option.c，添加EC200A的pid和vid，如果是其他模组可以看是否已经包含有。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">static const struct usb_device_id option_ids[] = {#if 1 //Added by Quectel    { USB_DEVICE(0x05C6, 0x9090) }, /* Quectel UC15 */    { USB_DEVICE(0x05C6, 0x9003) }, /* Quectel UC20 */    { USB_DEVICE(0x05C6, 0x9215) }, /* Quectel EC20(MDM9215) */    { USB_DEVICE(0x2C7C, 0x0125) }, /* Quectel EC20(MDM9x07)/EC25/EG25 */    { USB_DEVICE(0x2C7C, 0x0121) }, /* Quectel EC21 */    { USB_DEVICE(0x2C7C, 0x0191) }, /* Quectel EG91 */    { USB_DEVICE(0x2C7C, 0x0195) }, /* Quectel EG95 */    { USB_DEVICE(0x2C7C, 0x0306) }, /* Quectel EG06/EP06/EM06 */    { USB_DEVICE(0x2C7C, 0x030B) }, /* Quectel EG065K/EG060K */    { USB_DEVICE(0x2C7C, 0x0514) }, /* Quectel BL EG060K RNDIS Only */    { USB_DEVICE(0x2C7C, 0x0512) }, /* Quectel EG12/EP12/EM12/EG16/EG18 */    { USB_DEVICE(0x2C7C, 0x0296) }, /* Quectel BG96 */    { USB_DEVICE(0x2C7C, 0x0700) }, /* Quectel BG95/BG77/BG600L-M3/BC69 */    { USB_DEVICE(0x2C7C, 0x0435) }, /* Quectel AG35 */    { USB_DEVICE(0x2C7C, 0x0415) }, /* Quectel AG15 */    { USB_DEVICE(0x2C7C, 0x0452) }, /* Quectel AG520 */    { USB_DEVICE(0x2C7C, 0x0455) }, /* Quectel AG550 */    { USB_DEVICE(0x2C7C, 0x0620) }, /* Quectel EG20 */    { USB_DEVICE(0x2C7C, 0x0800) }, /* Quectel RG500/RM500/RG510/RM510 */    { USB_DEVICE(0x2C7C, 0x0801) }, /* Quectel RG520/RM520/SG520 */    { USB_DEVICE(0x2C7C, 0x6026) }, /* Quectel EC200 */    { USB_DEVICE(0x2C7C, 0x6120) }, /* Quectel UC200 */    { USB_DEVICE(0x2C7C, 0x6000) }, /* Quectel EC200/UC200 */    { USB_DEVICE(0x2C7C, 0x6005) }, /* Quectel EC200a */    { .match_flags = USB_DEVICE_ID_MATCH_VENDOR, .idVendor = 0x2C7C }, /* Match All Quectel Modules */#endif    { USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_COLT) },    { USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA) },    { USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA_LIGHT) },    { USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA_QUAD) },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据手册Quectel_UMTS_LTE_5G_Linux_USB_Driver用户指导V1.0.pdf，还需要:</p><ol><li><p>添加USB零包机制</p><img src="/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/Untitled1.png" class="" title="添加USB零包机制"><pre class="line-numbers language-c" data-language="c"><code class="language-c">#if 1 //Added by Quectel for zero packetif (dir == USB_DIR_OUT) {struct usb_device_descriptor *desc = &amp;serial-&gt;dev-&gt;descriptor;if (desc-&gt;idVendor == cpu_to_le16(0x2C7C))urb-&gt;transfer_flags |= URB_ZERO_PACKET;}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加复位恢复机制</p><img src="/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/Untitled2.png" class="" title="添加复位恢复机制"><pre class="line-numbers language-c" data-language="c"><code class="language-c">#if 1 //Added by Quectel.reset_resume = usb_wwan_resume,#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用ECM or RANDIS</p><img src="/2024/06/11/openwrt-xi-tong-yi-zhi-yi-yuan-ec200a-mo-kuai/Untitled3.png" class="" title="使用ECM or RANDIS"></li></ol><p>但是对于我使用的linux内核版本，在Quectel_Linux_USB_Serial_Option_Driver_20230524.tgz的文件中移远已经进行添加修改，所以我们只需要全部替换build_dir/——-/drivers/usb/serial中对应的文件即可。</p><p>修改完后需要对内核进行配置，在源码目录<code>make kernel_menuconfig</code>和<code>make menuconfig</code>，记得保存后再退出。</p><pre class="line-numbers language-none"><code class="language-none">添加ECM与RNDIS驱动make kernel_menuconfigDevice Drivers &nbsp;---&gt;    [*] USB support &nbsp;---&gt;        &lt;*&gt; &nbsp; Support for Host-side USB        &lt;*&gt; &nbsp; USB Serial Converter support &nbsp;---&gt;            &lt;*&gt; &nbsp; USB driver for GSM and CDMA modems    [*] Network device support &nbsp;---&gt;        USB Network Adapters &nbsp;---&gt;            &lt;*&gt; Multi-purpose USB Networking Framework                &lt;*&gt; &nbsp; CDC Ethernet support (smart devices such as cable modems)                &lt;*&gt; &nbsp; CDC NCM support                &lt;*&gt; &nbsp; Host for RNDIS and ActiveSync devices (EXPERIMENTAL)添加 USB网络驱动make menuconfigKernel modules &nbsp;---&gt; &nbsp;  USB Support &nbsp;---&gt; &nbsp; &nbsp; &nbsp; &nbsp;-*- kmod-usb-core &nbsp; &nbsp; &nbsp; &nbsp;-*- kmod-usb-net &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-*- &nbsp; kmod-usb-net-cdc-ether &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; &nbsp; kmod-usb-net-rndis &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; kmod-usb-ohci &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; kmod-usb-serial &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; kmod-usb-serial-option &nbsp; &nbsp; &nbsp; &nbsp; -*- kmod-usb-serial-wwan &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; kmod-usb-uhci &nbsp; &nbsp; &nbsp; &nbsp; &lt;*&gt; kmod-usb2PPP拨号相关( 如果不使用PPP可以减少这块的编译安装)Network &nbsp;---&gt; &nbsp; &nbsp;-*- chat &nbsp;  &lt;*&gt; ppp &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; ppp-mod-pppoa &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; ppp-mod-pppoe &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; ppp-mod-pppol2tp &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; ppp-mod-pptp &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; ppp-mod-radius &nbsp;  &lt;*&gt; ppp-multilink &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; pppdump &nbsp; &nbsp; &nbsp;  &lt;*&gt; &nbsp; pppstats &nbsp;  &lt;*&gt; ser2net添加网络工具Utilities &nbsp;---&gt; &nbsp;  &lt;*&gt; usb-modeswitch添加命令工具Base system ---&gt; &nbsp;  &lt;*&gt; busybox (编译后出现 回车键进入) &nbsp; &nbsp; &nbsp;  Miscellaneous Utilities ---&gt; [*] microcom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后进行编译make V=99 -j12</p><p>成功后在源码目录的/bin/targets/mediatek/mt7981/下有生成的固件，烧录型如：openwrt-mediatek-mt7981-mt7981-spim-nand-rfb-squashfs-sysupgrade.bin的文件即可</p><p>烧录后USB接入板子，ls /dev/ttyUSB*查看是否有3个ttyUSB，如果有即网卡USB驱动移植成功</p><p>利用echo或者microcom发送AT指令：</p><ol><li>ATI</li><li>AT+CMEE=2</li><li>AT+CPIN?</li><li>AT+QCCID</li><li>AT+QCFG=”usbnet”,1</li><li>AT+QNETDEVCTL=3,1</li></ol><p>AT开启自动拨号上网，<code>vi  /etc/config/network</code>配置网络上网：</p><pre class="line-numbers language-none"><code class="language-none">config interface 'wwan1'    option ifname 'usb0'    option proto 'dhcp'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用ifconfig查看网卡是否生成wwan1，ping baidu.com看是否上网。</p><h2 id="技巧：打补丁法"><a href="#技巧：打补丁法" class="headerlink" title="技巧：打补丁法"></a><strong>技巧：打补丁法</strong></h2><p>由于build_dir 在make clean 后就会清空修改后文件，可以通过patch方式来实现编译自动生成代码，</p><p>吧/drivers/usb/serial目录下option.c qcserial.c usb_wwan.c usb-wwan.h 拷贝到桌面(<strong>如果修改这部分代码，需要还原一下文件，最好方式make clean 然后再make V=s -j12</strong>)，找到移远的linux的USB驱动相近内部版本，通过命令生成patch ( diff -Nur file.old file.new &gt; xxx.patch)<br><code>diff -Nur xx/ v4.14.111/drivers/usb/serial/ &gt; ./ec200a.patch</code></p><p>生成完之后不能直接用，</p><ul><li>所有diff -Nur 的行全部删除</li><li>将所有的xx 替换 a/drivers/usb/serial</li><li>将所有的v4.14.111/drivers/usb/serial 替换 b/drivers/usb/serial</li></ul><p>重命名（0999-add-mt7981-ec200a-drivers.patch）将生成的文件拷贝到<code>target/linux/ramips/patches-5.4/</code>，<code>make clean</code> 后才会在下一次的 <code>make V=99 -j12</code> 打入补丁。</p><p>编译好后可以在<code>build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_mt7981/linux-5.4.238/drivers/usb/serial/option.c</code>查看是否打人补丁，是否有EC200A的pid、vid，是否有移远USB网卡需要添加的部分等等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Wi-Fi7技术储备</title>
      <link href="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/"/>
      <url>/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="深入浅出Wi-Fi7技术储备"><a href="#深入浅出Wi-Fi7技术储备" class="headerlink" title="深入浅出Wi-Fi7技术储备"></a>深入浅出Wi-Fi7技术储备</h1><h1 id="Wi-Fi7新特性"><a href="#Wi-Fi7新特性" class="headerlink" title="Wi-Fi7新特性"></a>Wi-Fi7新特性</h1><h2 id="MLO链路聚合技术"><a href="#MLO链路聚合技术" class="headerlink" title="MLO链路聚合技术"></a>MLO<strong>链路聚合技术</strong></h2><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>MLD（即支持MLO的设备）PHY：</p><p>在MLD以前的IC虽然支持多个频段的连接，但是每一次只能够选择一个频段进行连接。所以对于一个终端而言，一次只能够和AP建立单独一个Wi-Fi连接，这个连接要不是在2.4GHz上某个信道，要不是在5GHz上的某个信道。而AP可以多个频段同时工作，但是其实现方法是通过多IC的方式处理的，也就是不同频段使用不同的IC进行隔离，从而能够允许多频段的并行工作。之所以一块IC只能够提供一个频段的连接，很大程度上与IC内部只提供单个基带的设置有关。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/MLD.png" class="" title="MLD"><p>粗略而言，我们可以理解图的上半部分是一个AP，这个AP包含一个IC，这个IC里面包含三个device，这里画三个主要是设想中分别对应2.4GHz，5GHz以及6GHz，也就是2.4+5+6的场景。该图的下半部分对应的是终端，该终端和AP一样，同样是一个IC，里面三个device。AP和终端间可以建立多个连接，按照图例上包含2个连接，即Link 1和Link 2。这里描述没有特别凸显一个IC内，而是仍然采用AP，STA这样的概念描述，是为了兼容协议当前框架的描述，换言之，最简单理解就是把原来两个独立的东西，塞到一个地方，然后讨论其协同工作的模式，但是其本身独立工作的机理并没有做改变，只是添加了新的协作功能而已。</p><p>多链路设备的一个射频单元有至少两个以上的射频链路链接到空口，但对于逻辑链路控制（LLC）层仅只有一个MAC地址。相比于单链路设备，在射频链路上增加了冗余。设备根据使用场景与状态，进行不同链路的切换与协同，来保障数据能够更高效、更快速、低延迟地进行传输。</p><p>MLO中还有一个一个概念就是Link的概念，代表实际的连接。注意：Link也有各自独立的mac地址。协议规定MLD的mac可以跟两个Link中的一个相同，也可以是另外不同的唯一地址。</p><h3 id="MLO的细分模式"><a href="#MLO的细分模式" class="headerlink" title="MLO的细分模式"></a>MLO的细分模式</h3><ol><li><p><strong>STR和NSTR模式</strong></p><p> <strong>异步模式（STR模式）</strong></p><p> Simultaneous Tx and Rx，同时的收发工作模式。是一种不同Link间允许同时工作，所产生全双工的工作机制。两个Link是完全独立工作的，两者互不干扰。所以在传输过程中，就有可能会出现，link 1发送，link 2接收这样的情况，所以称为STR模式。（注意：和以太网上的全双工不是一个概念）</p> <img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled.png" class="" title="STR"><p> <strong>同步模式（NSTR模式）</strong></p><p> non-STR：不支持在两个link上同时TX/RX，两个link要么同时发送要么同时接收，比如2G+5G/6G</p> <img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled1.png" class="" title="NSTR"><p> 2.4G + 5G干扰比较小，所以可以用STR 同时进行TX/RX没有问题。而5G + 5G/6G由于信道相邻，一个link的发射很容易功率泄露出去影响到另外一个link的接收。</p></li><li><p><strong>MLO MLMR和MLSR模式</strong></p><p> 这两种模式主要是站在当前工作的Link数量的角度来定义的。</p><p> 虽然MLO支持多个Link，但并不是时时刻刻都有多个link在工作。比如一开始连上的时候，默认是只有一个link在工作的，主要是为了省电，等到系统检测到流量开始多起来，才会使能另外一条link来获得更好的性能。实际使用过程中的各种场景较复杂，也有很多其他场景被迫只能使用一根（比如干扰，SAP/P2P共流）。</p> <img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled2.png" class="" title="MLMR和MLSR"><p> MLMR: Multi Link Multi Radio: 两条link都在工作，在国内就类似是2.4G+5G</p><p> MLSR: Multi Link Single Radio: 只有一条link在工作，只有2.4G或者只有5G，通过形如“qos null pm=1”告诉路由器这条link休眠了。</p></li></ol><h3 id="复制传输和联合传输"><a href="#复制传输和联合传输" class="headerlink" title="复制传输和联合传输"></a><strong>复制传输和联合传输</strong></h3><p>在多链路设备上进行数据传输的典型模式有复制传输和联合传输。复制传输，其中一个信道环境存在干扰时，接收端根据先到先得原则，可以有效地降低传输时延。联合传输，顾名思义就是将数据报文进行合理地拆分，同时在两个射频链路上进行数据传输，可以有效地提升传输效率。此外，多链路设备可以通过其中一个链路交换其它链路的工作状态和电源管理信息，使其仅在需要的时候进入工作状态，剩余时间休眠，更有效地节能。</p><blockquote><p>对于上述提到的MLO细分模式和传输模式，对于我们目前来讲更多是黑盒状态，我们并不能知道实际上使用的是哪种模式，协议和底层配置已经实现了，实际使用上应该根据环境是自动切换。</p></blockquote><h3 id="MLO与传统双WIFI技术的对比"><a href="#MLO与传统双WIFI技术的对比" class="headerlink" title="MLO与传统双WIFI技术的对比"></a><strong>MLO与传统双WIFI技术的对比</strong></h3><p>MLO确实很像双Wi-Fi加速，都是连两个Wi-Fi热点，都能实现加速特点。但WiFi 7的MLO跟这个其实不是一回事。现有的双WiFi加速实现的原理是双网卡（wlan0/wlan1），连两个WiFi会有两个IP地址，上层再把数据在TCP层次聚合在一起。而WiFi 7的MLO多链接操作，在逻辑上仍然是单网卡(wlan0)，两个通路的数据在MAC层就聚合了，对上层来说，完全感知不到连了两个Wi-Fi热点。</p><p><strong>双Wi-Fi加速：</strong></p><ul><li>双网卡双wlan节点双IP地址；</li><li>需要TCP层次的客制化修改以分配和聚合不同网卡的TCP连接；</li><li>可以支持任意2.4G+5G的热点混搭；</li><li>只对使用多TCP connections的app有好处；</li><li>需要主动去连接两个Wi-Fi热点。</li></ul><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled3.png" class="" title="双Wi-Fi加速"><p><strong>Wi-Fi 7 MLO：</strong></p><ul><li>无需TCP层次的修改，用户空间感知不到有任何变化；</li><li>单网卡单wlan节点单IP地址；</li><li>数据聚合发生在MAC层</li><li>对上层app的TCP connections没有任何要求；</li><li>需要路由器也支持WiFi MLO才能支持多链路操作；</li><li>只要主动连一个热点，另外一个自动连接。</li></ul><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled4.png" class="" title="Wi-Fi 7 MLO"><h2 id="MRU多资源单元技术"><a href="#MRU多资源单元技术" class="headerlink" title="MRU多资源单元技术"></a>MRU多资源单元技术</h2><p>Wi-Fi6引入了OFDMA（正交频分多址，最广应用在4G技术LTE上），提出了RU(Resource uint)的概念，定义了一共7种RU：26-tone RU、52-tone RU、106-tone RU、242-tone RU、484-tone RU、9966-tone RU和2X996-tone RU，但这些情况下，用户只能分配到固定的RU工作。</p><p>一个20MHz的OFDMA信道包含了256个子载波（Subcarriers，或者称为Tones）组成。这些子载波组成了一些子信道，我们称一个子信道为一个资源单元（RU）。如上图所示，当20 MHz信道时被细分时，802.11ax终端可以使用4种不同大小的RU单元，分别包含26个子载波，52个子载波，106个子载波和242子载波，大约相当于2MHz，4MHz，8MHz和20MHz信道带宽的分别。 802.11ax的AP决定了在一个20MHz信道内可以使用多少个RU，以及RU形成的不同组合。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled5.png" class="" title="RU"><p>简答来讲就是：将信道分成若干正交子信道，将高速数据信号转换成并行的低速子数据流，调制到在每个子信道上进行传输。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled6.png" class="" title="发送示意图"><p>如上图所示，802.11ax AP首先向终端#1和终端#2发送下行数据，在第一时刻，20MHz的信道通过OFDMA技术被划分成了两个子信道。在OFDMA技术中，20MHz信道包含了256个子载波，终端#1和终端#2分别占据106个子载波，这些子载波互相没有交叠。在第二时刻，802.11ax AP向终端#3，终端#4，终端#5和终端#6发送下行信息。在此时，信道被划分成4个子信道，分别占据52个子载波。在第三时刻，802.11ax AP使用整个信道发送下行数据帧给终端#5，此时一共使用了242个数据子载波，其可以有效的利用整个20MHz的信道。在第四时刻，AP使用两个子信道，分别是106个子载波向终端#4和终端#6发送数据。在第五时刻，AP在此向单个终端（即终端#1）发送下行数据，其占据整个20MHz信道，包含242个数据子载波。在第六时刻，AP同时向终端#3，终端#4和终端#6发送下行数据。此时，信道被划分成3个不等大小的子信道，其中终端#3和终端#4分别占据52个子载波，终端#6占据106个子载波。</p><p>Wi-Fi7中提出了MRU的概念，它允许讲多个RU分给单用户使用。例如，20M带宽，分配给两个用户，在Wi-Fi6时代，两个用户可以分别分配106，到了Wi-Fi7，可以分别分配106+26和106。</p><p>对于前面提到的RU，随意组合会较大增加复杂度，因此协议对组合进行了限制，首先协议将RU分成了两类：</p><ul><li>小部RU：26、52、106-tone RU</li><li>大部RU：242、484、996、2×996、 3×996-toneRU</li></ul><p>不同大类RU之间不能组合，具体组合规范不进行探讨。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled7.png" class="" title="RU组合表"><p>大部+小部这样去拼凑，理论上是有增益的，但实际上需要依赖：</p><ul><li>厂家对于MRU的构造算法；</li><li>实际使用场景和环境对于sub carriers（tones）的分配的影响。</li></ul><blockquote><p>私货：感觉Wi-Fi的协议还是比较理想化，像搭乐高积木一样，在相同应用OFDMA技术的LTE上，基站已经可以根据子载波灵活分配给最合适的用户终端了，不受子载波是否连续的限制，而且分配机制的主要准则是看信噪比进行分配，而非厂商定义。</p></blockquote><h3 id="对于多用户"><a href="#对于多用户" class="headerlink" title="对于多用户"></a>对于多用户</h3><p>配合OFDMA，可以降低延迟25%（源自MediaTek文档，对比11ax）。<br>例如，如果4个用户同时传输，传输数据比例为2:2:3:1，与WiFi5和WiFi6 AP相比，实现了最短端到端延迟，延迟分别降低了33%和25%，如图所示</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled8.png" class="" title="多用户延时对比"><h3 id="对于单用户"><a href="#对于单用户" class="headerlink" title="对于单用户"></a>对于单用户</h3><p>单个用户要结合前导码打孔技术技术来一起看，才能体现出Wi-Fi7的优势，具体如下</p><h2 id="Preamble-Puncture-前导码打孔技术"><a href="#Preamble-Puncture-前导码打孔技术" class="headerlink" title="Preamble Puncture 前导码打孔技术"></a>Preamble Puncture 前导码打孔技术</h2><p> Wi-Fi6其实就已经有了preamble puncture了，本质上是频谱打孔。但是技术有一个要求，就是给两个或者以上节点配合工作。比如一段频谱，中间被占一小段，那么就可以调度两个资源单元（RU），左右隔开来，给分配给两个用户使用。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled9.png" class="" title="preamble puncture"><p><strong>为什么给选两个或者以上用户？</strong></p><p>这就是Wi-Fi6的要求，一个用户只能选一个RU。但是一个紧接着问题是，如果只有一个用户，或者此时虽然多个用户，但是只有一个用户有数据要传输。那么之前的频谱打孔就失效了。因此，反思问题主要是一个用户只能选一个RU，那么改成MRU就可以了。排除协议细节，仅从思路上我们可以这样理解。</p><img src="/2024/06/11/shen-ru-qian-chu-wi-fi7-ji-zhu-chu-bei/Untitled10.png" class="" title="打孔后对比"><p>带来好处最直接的就是用户带宽的设置和使用，默认设置最大即可，中间靠协议和实现，底层做自适应的调节。能给单个用户在信道受干扰的条件下分配到更大的带宽资源，也就是提升了抗干扰能力了。</p><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><ol><li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/pdf/wi-fi-7-and-beyond.pdf">https://www.intel.com/content/dam/www/public/us/en/documents/pdf/wi-fi-7-and-beyond.pdf</a></li><li><a href="https://www.qualcomm.com/news/onq/2022/02/pushing-limits-wi-fi-performance-wi-fi-7">https://www.qualcomm.com/news/onq/2022/02/pushing-limits-wi-fi-performance-wi-fi-7</a></li><li><a href="https://www.youtube.com/watch?v=ohexy5VE170">https://www.youtube.com/watch?v=ohexy5VE170</a></li><li><a href="https://d86o2zu8ugzlg.cloudfront.net/mediatek-craft/documents/Wi-Fi-7-MLO-White-Paper-WF7MLOWP0622.pdf">https://d86o2zu8ugzlg.cloudfront.net/mediatek-craft/documents/Wi-Fi-7-MLO-White-Paper-WF7MLOWP0622.pdf</a></li><li><a href="https://mediatek-marketing.files.svdcdn.com/production/documents/Wi-Fi-7-MLO-White-Paper-WF7MLOWP0622.pdf?dm=1684470687">https://mediatek-marketing.files.svdcdn.com/production/documents/Wi-Fi-7-MLO-White-Paper-WF7MLOWP0622.pdf?dm=1684470687</a></li><li><a href="https://mediatek-marketing.files.svdcdn.com/production/documents/Key-Advantages-of-Wi-Fi-7_MediaTek-White-Paper-WF70222.pdf?dm=1684470666">https://mediatek-marketing.files.svdcdn.com/production/documents/Key-Advantages-of-Wi-Fi-7_MediaTek-White-Paper-WF70222.pdf?dm=1684470666</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>荡</title>
      <link href="/2024/03/08/dang/"/>
      <url>/2024/03/08/dang/</url>
      
        <content type="html"><![CDATA[<p>荡荡上帝，下民之辟。疾威上帝，其命多辟。天生烝民，其命匪谌。靡不有初，鲜克有终。</p><span id="more"></span><p>文王曰咨，咨汝殷商。曾是彊御？曾是掊克？曾是在位？曾是在服？天降滔德，女兴是力。<br>文王曰咨，咨女殷商。而秉义类，彊御多怼。流言以对。寇攘式内。侯作侯祝，靡届靡究。<br>文王曰咨，咨女殷商。女炰烋于中国。敛怨以为德。不明尔德，时无背无侧。尔德不明，以无陪无卿。<br>文王曰咨，咨女殷商。天不湎尔以酒，不义从式。既衍尔止。靡明靡晦。式号式呼。俾昼作夜。<br>文王曰咨，咨女殷商。如蜩如螗，如沸如羹。小大近丧，人尚乎由行。内奰于中国，覃及鬼方。<br>文王曰咨，咨女殷商。匪上帝不时，殷不用旧。虽无老成人，尚有典刑。曾是莫听，大命以倾。<br>文王曰咨，咨女殷商。人亦有言：颠沛之揭，枝叶未有害，本实先拨。殷鉴不远，在夏后之世。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
